---
import StarRating from '@components/StarRating.astro';
import type { Media } from '@models/Media';

interface Props {
    media: Media;
    includeReview?: boolean;
}

const { media, includeReview = false } = Astro.props;

const getPlayedIcon = (g: Media): string | null => {
    switch (g.finished) {
        case 'yes':
            return ' ✅';
        case 'no':
            return ' ❌';
        case 'n/a':
        default:
            return null;
    }
};
---

<div class="item">
    <div>
        <a href={media.link} target="_blank" rel="noreferrer">
            <img src={`/images/${media.imageFolder}/${media.cover}`} alt={media.title} class="cover" />
        </a>
    </div>
    <div>
        <a href={media.link} target="_blank" rel="noreferrer">
            {media.title}
        </a>

        {getPlayedIcon(media)}

        {media.author ? <div class="meta">{media.author}</div> : null}

        {media.dateWatched ? <div class="meta">{media.dateWatched}</div> : null}

        {media.system ? <div class="meta">{media.system}</div> : null}

        {
            includeReview && (
                <>
                    {media.rating !== null && <StarRating rating={media.rating} />}

                    <>
                        {media.thoughts !== null && (
                            <div class="view-thoughts">
                                <button class="toggle-thoughts" type="button" data-thoughtsId={media.cover}>
                                    View Thoughts
                                </button>
                                <div class="thoughts" style="display: none;" id={media.cover}>
                                    {media.thoughts}
                                </div>
                            </div>
                        )}
                    </>
                </>
            )
        }
    </div>
</div>

<style>
    .item {
        font-size: 1.1rem;
        text-align: center;
        vertical-align: top;
        line-height: 1.3;
        width: 200px;
    }

    .item a {
        font-size: 1.25rem;
    }

    .cover {
        border: 1px solid #bcbcbc;
        margin: 0 auto 1rem;
        display: block;
        max-height: 300px;
    }

    .cover:hover {
        animation: pulse-animation 2s infinite;
    }

    .meta {
        margin: 0.6rem 0;
        color: var(--meta);
        font-style: italic;
    }

    .view-thoughts {
        margin: 0.5rem 0;
        font-size: 1.05rem;
    }

    .toggle-thoughts {
        background: none !important;
        color: inherit;
        border: none;
        padding: 0 !important;
        font: inherit;
        cursor: pointer;
        color: var(--primary-color-1);
    }

    .view-thoughts .thoughts {
        line-height: 1.5;
        margin: 10px 0;
        border: 1px solid var(--primary-color-2);
        padding: 10px;
        border-radius: 6px;
        background: rgba(200, 200, 200, 0.2);
    }

    @media all and (max-width: 767px) {
        .item {
            text-align: left;
            font-size: 1.3rem;
            display: block;
            margin: 30px 0;
            width: 100%;
            display: grid;
            grid-template-columns: 1fr 1fr;
            grid-column-gap: 1.5rem;
        }

        .meta {
            font-size: 1.1rem;
        }
    }

    @keyframes pulse-animation {
        0% {
            box-shadow: 0 0 0 0px rgba(0, 0, 0, 0.2);
        }

        100% {
            box-shadow: 0 0 0 20px rgba(0, 0, 0, 0);
        }
    }
</style>
